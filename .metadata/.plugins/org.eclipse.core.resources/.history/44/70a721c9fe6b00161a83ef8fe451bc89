/*
 * This is the class that carries the details of a particular publication
 * as a MODEL for viewing publications on the front-end
 */
package edu.unsw.comp9321;

import java.util.ArrayList;
import java.util.List;

public class PublicationBean {
	
	// == GENERIC PUBLICATION ATTRIBUTES
	public String id = "";
	public String type = "";
	public String title = "";
	public List<String> authors = new ArrayList<String>();
	public List<String> editors = new ArrayList<String>();
	public String year = "";
	public String venue = "";
	public List<String> urls = new ArrayList<String>();
	public List<String> cites = new ArrayList<String>();
	
	// == PUBLICATION SPECIFIC ATTRIBUTES
	// NOTE: This is a list of unique attributes amongst ALL the
	// specific publication types. Refer to "Publications Schema (Reference)"
	// for more info
	public String rating = "";
	public String number = "";
	public String pages = "";
	public String volume = "";
	public String publisher = "";
	public String isbn = "";
	public String series;
	
	// == OTHER ATTRIBUTES THAT FACILITATE PRESENTATION
	public String formattedAuthors = "";
	public String formattedEditors = "";
	
	// Constructor when given the publication class
	public PublicationBean(Publication newPublication) {
		
		// Case when given a null publication
		if (newPublication == null) {
			// do nothing
		}
		
		// Publication given is not null - set fields appropriately
		else {
			// = Consider generic fields
			this.id = newPublication.id;
			this.type = newPublication.type;
			this.title = newPublication.title;
			this.authors = newPublication.authors;
			this.editors = newPublication.editors;
			this.year = newPublication.year;
			this.venue = newPublication.venue;
			this.urls = newPublication.urls;
			this.cites = newPublication.cites;

			// = Consider type-specific fields
			switch(newPublication.type) {
			
				// ARTICLE
				case "journal":
					PublicationArticle article_ref = (PublicationArticle) newPublication;
					this.rating = article_ref.rating;
					this.number = article_ref.number;
					this.pages = article_ref.pages;
					this.volume = article_ref.volume;
					break;
					
				case "conference (inproceedings)":
					PublicationInproceedings inproceedings_ref = (PublicationInproceedings) newPublication;
					this.pages = inproceedings_ref.pages;
					this.number = inproceedings_ref.number;
					break;
				case "journal":
					break;
				case "journal":
					break;
				case "journal":
					break;
				case "journal":
					break;
				case "journal":
					break;
				case "journal":
					break;
			
				default:
					break;
			}
			
			// = Other attributes
			// formatted authors
			for (String author : this.authors) {
				this.formattedAuthors += author + "; ";
			}
			this.formattedAuthors = this.formattedAuthors.trim();
			// formatted editors
			for (String editor : this.editors) {
				this.formattedEditors += editor + "; ";
			}
			this.formattedEditors = this.formattedEditors.trim();
		}
	}
	
	// = GETTERS
	
	// Generic attributes
	public String getId() { return this.id; }
	public String getType() { return this.type; }
	public String getTitle() { return this.title; }
	public List<String> getAuthors() { return this.authors; }
	public List<String> getEditors() { return this.editors; }
	public String getYear() { return this.year; }
	public String getVenue() { return this.venue; }
	public List<String> getUrls() { return this.urls; }
	public List<String> getCites() { return this.cites; }
	
	// Publication specific attributes
	public String getRating() { return this.rating; }
	public String getNumber() { return this.number; }
	public String getPages() { return this.pages; }
	public String getVolume() { return this.volume; }
	public String getPublisher() { return this.publisher; }
	public String getIsbn() { return this.isbn; }
	public String getSeries() { return this.series; }
	
	public String getFormattedAuthors() { return this.formattedAuthors;	}
	public String getFormattedEditors() { return this.formattedEditors; }
		
}
