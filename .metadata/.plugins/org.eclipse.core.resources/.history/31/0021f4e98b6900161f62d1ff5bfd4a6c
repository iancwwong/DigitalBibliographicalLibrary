/*
 * This class represents the hander that will consider the
 * semantics of publications when parsing the xml file
 */

package edu.unsw.comp9321;

public class SaxPublicationsHandler {
	
	//public ArrayList<Character> characters = new ArrayList<Character>();
	public HashMap<String, ArrayList<Publication>> publications = new HashMap<String, Publication>();
	public Character currentCharacter = null;
	
	// For parsing tags correctly
	private Stack<String> elementStack = new Stack<String>();
	
	// Deals with start tags
	@Override
	public void startElement(String uri, String localName, String elementName,
			Attributes attributes) throws SAXException {
		
		this.elementStack.push(elementName);
		
		if (elementName.equals("Character")) {	
			this.currentCharacter = new Character();
			if (attributes.getValue("alive").equals("true")) {
				this.currentCharacter.alive = true;
			} else {
				this.currentCharacter.alive = false;
			}
		} 		
	}
	
	// Deals with end tags
	@Override
	public void endElement(String uri, String localName, String elementName) 
			throws SAXException {
		this.elementStack.pop();
		
		// If the case of ending 'Character' tag, add created character
		// to hashmap
		if (elementName.equals("Character")) {
			this.characters.put(this.currentCharacter.name, this.currentCharacter);
		}
	}
	
	// Deals with all the characters between the start and end tags
	// ie element values
	@Override
	public void characters(char ch[], int start, int length)
		throws SAXException {
		
		String value = new String(ch,start,length).trim();
		
		// Ignore white space
		if (value.length() == 0) return;
		
		// Determine semantics of the element value, depending on what was
		// the last start element tag
		String elementName = this.elementStack.peek();
		Character currCharacter = this.currentCharacter;
		if ("Name".equals(elementName)) {
			currCharacter.name = value;
		} else if ("Diet".equals(elementName)) {
			currCharacter.diet = value;
		} else if ("Sound".equals(elementName)) {
			currCharacter.sounds.add(value);
		}
	}

}
