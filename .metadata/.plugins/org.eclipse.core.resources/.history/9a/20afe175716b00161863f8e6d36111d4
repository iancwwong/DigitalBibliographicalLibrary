/*
 * This is the class that is responsible for redirecting
 * to multiple pages.
 * NOTE: Does NOT follow MVC, as only 1 controller is allowed, when there
 * are a variety of functions
 */
package edu.unsw.comp9321;

import java.io.IOException;
import java.util.*;

import javax.servlet.RequestDispatcher;
import javax.servlet.ServletContext;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import javax.xml.parsers.SAXParser;
import javax.xml.parsers.SAXParserFactory;

import org.xml.sax.InputSource;

/**
 * Servlet implementation class ControllerServlet
 */
@WebServlet("/control")
public class ControllerServlet extends HttpServlet {
	private static final long serialVersionUID = 1L;
	
	// xml filename for dataset
	private String xmlFilename = "/DATA-INF/dblp.xml";
	
	// Store the publications
	private HashMap<String, ArrayList<Publication>> publications = new HashMap<String, ArrayList<Publication>>();
	
	// Store number of publications
	private int numPubs = 0;
	
	// Store the mapping of the publication semantic name with technical name
	private HashMap<String, String> publicationTypeMap = new HashMap<String, String>();
	
	// Random number generator
	Random randomiser;
       
    /**
     * @see HttpServlet#HttpServlet()
     */
    public ControllerServlet() {
        super();

		// Instantiate the type mappings for publications
		// with:
		//      key = type found in xml
		//      value = semantically equivalent name
		this.publicationTypeMap.put("article", "journal");
		this.publicationTypeMap.put("inproceedings", "conference (inproceedings)");
		this.publicationTypeMap.put("proceedings", "conference (proceedings)");
		this.publicationTypeMap.put("book", "book");
		this.publicationTypeMap.put("incollection", "incollection");
		this.publicationTypeMap.put("phdthesis", "phd thesis");
		this.publicationTypeMap.put("mastersthesis", "masters thesis");
		this.publicationTypeMap.put("www", "www");
		
		this.randomiser = new Random();
    }

	/**
	 * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		// Check if need to parse xml file
		if (this.publications.size() == 0) {
			parseXMLFile();
		}
		doPost(request, response);		
	}

	/**
	 * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		// Determine page to redirect
		String redir_page = "index.jsp";		// default page
		Map<String, String[]> req_parameters = request.getParameterMap();
			if (req_parameters.containsKey("action")) {
			String action = request.getParameter("action");
			switch (action) {
				case "viewIndex":
					redir_page = "index.jsp";
					break;
					
				case "viewCart":
					redir_page = "cart.jsp";
					break;
					
				case "viewPublication":
					redir_page = "publication.jsp";
					
				default:
					break;
			}
		}
			
		// Case of home page: Generate 10 random publications to display
		if (redir_page.equals("index.jsp")) {
			// Obtain up to 10 random publications (depending on how many publications there are)
			ArrayList<Publication> randPublications = new ArrayList<Publication>();
			Publication randPublication = getRandomPublication();
			while (randPublications.size() < 10 && randPublications.size() < this.numPubs) {
				if (randPublications.contains(randPublication)) {
					randPublication = getRandomPublication();
				} else {
					randPublications.add(randPublication);
				}
			}
			
			// Pass the random publications to index bean, and assign bean to index page
			IndexBean indexBean = new IndexBean(randPublications);
			HttpSession session = request.getSession();
			session.setAttribute("indexBean", indexBean);
		}
		
		// Case of cart: View the user's cart
		else if (redir_page.equals("cart.jsp")) {
			// FOR NOW, DOES NOTHING
		}
		
		// Case of viewing a particular publication
		else if (redir_page.equals("publication.jsp")) {
			// Obtain the specific ID of the publication to view
			String pubID = request.getParameter("pubID");
			
			// Obtain the publication object
			Publication pubToView = getPublicationFromID(pubID);
			
			// Create the view publication bean, assign to page
			ViewPublicationBean viewPublicationBean = new viewPublicationBean(pubToView);
			
		}
		
		// Redirect the page
		RequestDispatcher rd = request.getRequestDispatcher("/"+redir_page);
		rd.forward(request, response);
	}
	
	/*
	 * == HELPER FUNCTIONS
	 */
	
	// Parse dblp.xml into list of publications
	private void parseXMLFile() {
		
        // Parse XML file into publication objects
    	ServletContext context = getServletContext();
    	InputSource xmlFile = new InputSource(context.getResourceAsStream(this.xmlFilename));
    	SAXParserFactory factory = SAXParserFactory.newInstance();
		try {
			System.out.println("Parsing XML file...");
			SAXParser saxParser = factory.newSAXParser();
			SaxPublicationsHandler handler = new SaxPublicationsHandler();
			saxParser.parse(xmlFile,  handler);
			
			this.publications = handler.publications;
			System.out.println("Successfully parsed XML file!");
			
			// Set total number of publications
			for (String publicationType : this.publications.keySet()) {
				System.out.println("Number of " + publicationType + ": " + this.publications.get(publicationType).size());
				this.numPubs += this.publications.get(publicationType).size();
			}
			System.out.println("== Total publications parsed: " + this.numPubs);
						
		} catch (Throwable err) {
			err.printStackTrace();
		}
	}
	
	private Publication getRandomPublication() {
		
		// Get random publication list of a random type
		List<String> publicationTypes = new ArrayList<String>(this.publications.keySet());
		String randomPublicationType = publicationTypes.get(this.randomiser.nextInt(publicationTypes.size()));
		ArrayList<Publication> randPublicationList = this.publications.get(randomPublicationType);
		
		// Assume there is at least 1 type of publication and 1 publication after initialisation
		// because other types have an empty list, we need to constantly check 
		// whether the type of publication is 
		while (randPublicationList.size() == 0) {		
			randomPublicationType = publicationTypes.get(this.randomiser.nextInt(publicationTypes.size()));
			randPublicationList = this.publications.get(randomPublicationType);
		}
		
		// Get random publication
		return randPublicationList.get(this.randomiser.nextInt(randPublicationList.size()));
	}
	
}
