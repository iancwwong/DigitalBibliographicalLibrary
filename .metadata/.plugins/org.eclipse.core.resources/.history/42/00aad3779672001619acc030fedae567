/*
 * This class represents the hander that will consider the
 * semantics of publications when parsing the xml file
 */

package edu.unsw.comp9321;

import org.xml.sax.Attributes;
import org.xml.sax.SAXException;
import org.xml.sax.helpers.DefaultHandler;

import java.text.DecimalFormat;
import java.util.*;

public class SaxPublicationsHandler extends DefaultHandler {
	
	// Holds the type of publications found in the xml
	public List<String> publicationTypes = new ArrayList<String>();
	
	// Holds the collection of publications
	public HashMap<String, ArrayList<Publication>> publications = new HashMap<String, ArrayList<Publication>>();

	// Keep track of current publication being parsed
	public Publication currPublication = null;
	private String currAuthor = "";
	
	// For parsing tags correctly
	private Stack<String> elementStack = new Stack<String>();
	
	// Keep track of generated id's
	private List<String> generatedIDs = new ArrayList<String>();
	
	// Random generator
	private Random random = new Random();
	
	/*
	 * CONSTRUCTOR
	 */
	public SaxPublicationsHandler() {
		super();
		
		// Instantiate publication types
		this.publicationTypes.add("article");
		this.publicationTypes.add("inproceedings");
		this.publicationTypes.add("proceedings");
		this.publicationTypes.add("book");
		this.publicationTypes.add("incollection");
		this.publicationTypes.add("phdthesis");
		this.publicationTypes.add("mastersthesis");
		this.publicationTypes.add("www");
		
		// Instantiate the hash map that contains publications
		for (String publicationType : this.publicationTypes){
			this.publications.put(publicationType, new ArrayList<Publication>());
		}
	}
	
	// Deals with start tags
	@Override
	public void startElement(String uri, String localName, String elementName,
			Attributes attributes) throws SAXException {
		
		this.elementStack.push(elementName);
		
		// Prepare appropriate publication object, depending on name
		switch (elementName) {
			case "article":
				this.currPublication = new PublicationArticle();
				PublicationArticle reference = (PublicationArticle) this.currPublication;
				
				// Obtain rating
				if (attributes.getIndex("rating") > 0) {
					reference.rating = attributes.getValue("rating");
				}
				break;
				
			case "inproceedings":
				this.currPublication = new PublicationInproceedings();
				break;
				
			case "proceedings":
				this.currPublication = new PublicationProceedings();
				break;
				
			case "book":
				this.currPublication = new PublicationBook();
				break;
				
			case "incollection":
				this.currPublication = new PublicationIncollection();
				break;
				
			case "phdthesis":
				this.currPublication = new PublicationPHDThesis();
				break;
				
			case "mastersthesis":
				this.currPublication = new PublicationMastersThesis();
				break;
				
			case "www":
				this.currPublication = new PublicationWWW();
				break;
				
			// Non publication types
			case "author":
				this.currAuthor = "";
				break;
				
			// unknown publication type
			default:
				break;
		}
		
	}
	
	// Deals with end tags
	@Override
	public void endElement(String uri, String localName, String elementName) 
			throws SAXException {
		this.elementStack.pop();
		
		// Determine if closing tag of a publication
		if (this.publicationTypes.contains(elementName)) {
			// Assign an id to publication
			this.currPublication.id = generateID();
			
			// Generate a price for the publication
			this.currPublication.price = generatePrice();
			
			// Add  publication to appropriate list
			ArrayList<Publication> listToAdd = this.publications.get(elementName);
			listToAdd.add(this.currPublication);
		}
		
		// Other tags that need to be processed
		else {
			switch(elementName) {
			
				case "author":
					break;
					
				default: 
					break;
			}
		}
		
	}
	
	// Deals with all the characters between the start and end tags
	// ie element values
	@Override
	public void characters(char ch[], int start, int length)
		throws SAXException {
		
		String value = new String(ch,start,length).trim();
		
		// Ignore white space
		if (value.length() == 0) return;
		
		// Determine semantics of the element value, depending on what was
		// the last start element tag
		String elementName = this.elementStack.peek();
		switch (elementName) {
		
			/*
			 * == GENERAL PUBLICATION FIELDS
			 */
			case "title":
				this.currPublication.title += value;
				break;
				
			// Formatting tags for title
			case "sup":
				this.currPublication.title += "<sup>" + value + "</sup>";
				break;
			case "sub":
				this.currPublication.title += "<sub>" + value + "</sub>";
				break;
			case "i":
				this.currPublication.title += "<i>" + value + "</i>";
				break;
			case "tt":
				this.currPublication.title += "<code>" + value + "</code>";
				break;
				
			case "author":
				this.currPublication.authors.add(value);
				break;
				
			case "editor":
				this.currPublication.editors.add(value);
				break;
				
			case "year":
				this.currPublication.year = value;
				break;
				
			case "journal":
			case "booktitle":
			case "school":
				this.currPublication.venue += " " + value;		// html characters makes 'value' occur on multiple lines
				this.currPublication.venue = this.currPublication.venue.trim();
				break;
				
			case "url":
			case "ee":
				this.currPublication.urls.add(value);
				break;
				
			case "cite":
				this.currPublication.cites.add(value);
				break;
			
			default:
				break;
		}
		
		// Consider publication-specific fields
		
		// == ARTICLE SPECIFIC FIELDS
		if (this.currPublication.type.equals("journal")) {
			PublicationArticle article_ref = (PublicationArticle) this.currPublication;
			switch(elementName) {
				case "number":
					article_ref.number = value;
					break;
					
				case "pages":
					article_ref.pages = value;
					break;
					
				case "volume":
					article_ref.volume = value;
					break;
										
				default: 
					break;
			}
		} 
		
		// == INPROCEEDINGS SPECIFIC FIELDS	
		else if (this.currPublication.type.equals("conference (inproceedings)")) {
			PublicationInproceedings inproceedings_ref = (PublicationInproceedings) this.currPublication;
			switch(elementName) {
				case "pages":
					inproceedings_ref.pages = value;
					break;
					
				case "number":
					inproceedings_ref.number = value;
					break;
					
				default: 
					break;
			}		
		}
		
		// == PROCEEDINGS SPECIFIC FIELDS
		else if (this.currPublication.type.equals("conference (proceedings)")) {
			PublicationProceedings proceedings_ref = (PublicationProceedings) this.currPublication;
			switch(elementName) {
				case "isbn":
					proceedings_ref.isbn = value;
					break;
					
				case "publisher":
					proceedings_ref.publisher = value;
					break;
					
				case "series":
					proceedings_ref.series = value;
					break;
					
				case "volume":
					proceedings_ref.volume = value;
					break;
					
				case "number":
					proceedings_ref.number = value;
					break;
					
				default: 
					break;
			}
		}
		
		// == BOOK SPECIFIC FIELDS
		else if (this.currPublication.type.equals("book")) {
			PublicationBook book_ref = (PublicationBook) this.currPublication;
			switch (elementName) {
				case "pages":
					book_ref.pages = value;
					break;
					
				case "publisher":
					book_ref.publisher += " " + value;		// html characters makes 'value' occur on multiple lines
					book_ref.publisher = book_ref.publisher.trim();
					break;
					
				case "isbn":
					book_ref.isbn = value;
					break;
					
				case "series":
					book_ref.series = value;
					break;
					
				case "volume":
					book_ref.volume = value;
					break;
			
				default: 
					break;
			}
		}
		
		// == INCOLLECTION SPECIFIC FIELDS
		else if (this.currPublication.type.equals("incollection")) {
			PublicationIncollection incollection_ref = (PublicationIncollection) this.currPublication;
			switch (elementName) {
				case "pages":
					incollection_ref.pages = value;
					break;
			
				default:
					break;
			}
		}
		
		// == PHD THESIS SPECIFIC FIELDS
		else if (this.currPublication.type.equals("phd thesis")) {
			PublicationPHDThesis phdthesis_ref = (PublicationPHDThesis) this.currPublication;
			switch (elementName) {
				case "series":
					phdthesis_ref.series = value;
					break;
					
				case "isbn":
					phdthesis_ref.isbn = value;
					break;
					
				case "pages":
					phdthesis_ref.pages = value;
					break;
					
				case "volume":
					phdthesis_ref.volume = value;
					break;
					
				case "number":
					phdthesis_ref.number = value;
					break;
				
				default:
					break;
			}
		}
		
		 // == MASTERS THESIS SPECIFIC FIELDS
		else if (this.currPublication.type.equals("masters thesis")) {
			PublicationMastersThesis mastersthesis_ref = (PublicationMastersThesis) this.currPublication;
			// no unique / specific fields for masters
		}
		
		// == WWW SPECIFIC FIELDS
		else if (this.currPublication.type.equals("www")) {
			PublicationWWW www_ref = (PublicationWWW) this.currPublication;
			// no unique / specific fields for masters
		}
	}
	
	/*
	 * HELPER FUNCTIONS
	 */
	
	// Generate a unique id for the publication
	private String generateID() {
		String uniqueID = UUID.randomUUID().toString();
		while (this.generatedIDs.contains(uniqueID)) {
			uniqueID = UUID.randomUUID().toString();
		}
		return uniqueID;
	}
	
	// Generate a price for the publication
	private Double generatePrice() {
		Double minPrice = 4.99;
		Double maxPrice = 99.99;
		Double randPrice = minPrice + (maxPrice - minPrice) * this.random.nextDouble();
		randPrice = Math.round(randPrice * 100.0) / 100.0;
		return randPrice;
	}

}
